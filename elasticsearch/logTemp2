Level = DEBUG, message = ActionEndXCommand:549 - SERVER[ec2.us-west-2.compute.amazonaws.com] USER[-] GROUP[-] TOKEN[-] APP[-] JOB[-] ACTION[-] Acquired lock for [$INT-$INT-oozie-oozi-W] in [action.end]
level=DEBUG , message = ActionStartXCommand:549 - SERVER[ec2.us-west-2.compute.amazonaws.com] USER[-] GROUP[-] TOKEN[-] APP[-] JOB[-] ACTION[-] Acquired lock for [$INT-$INT-oozie-oozi-W] in [action.start]
level=INFO, message = oozieaudit:543 - IP [$IP], USER [oozie], GROUP [null], APP [hive-wf], JOBID [$INT-$INT-oozie-oozi-W], OPERATION [start], PARAMETER [null], STATUS [SUCCESS], HTTPCODE [200], ERRORCODE [null], ERRORMESSAGE [null]
level=INFO, message = oozieaudit:543 - IP [$IP], USER [maple], GROUP [null], APP [workflow_page_hit], JOBID [$INT-$INT-oozie-oozi-W], OPERATION [start], PARAMETER [null], STATUS [SUCCESS], HTTPCODE [200], ERRORCODE [null], ERRORMESSAGE [null]
level = INFO, message = [c=aws.etl.executors.Action] [t=pool-5-thread-$INT] [id=$INT-$INT-oozie-oozi-W] [node=ATHENA_EVENTS_SEM_S3_GET_LPI] [event=start]
level=INFO, message = [c=aws.etl.executors.ActionDelegate] [t=pool-5-thread-47] [id=$INT-$INT-oozie-oozi-W] [node=ATHENA_EVENTS_SEM_S3_GET_LPI] [localmd=Localmd [mainClass=com.aws.ist.now.soon.etl.fwrk.oozie.action.GetLPIAction, javaOpts=-Daws.edw.oozie.metadata.env=test, args=[-processSk, $INT, -minBatchSkKey, ai_fraud_core.athena_events_data.min_batch, -maxBatchSkKey, ai_fraud_core.athena_events_data.max_batch, -envCode, BIGDEN, -minRptgDtKey, ai_fraud_core.athena_events_data.minRptgDt, -maxRptgDtKey, ai_fraud_core.athena_events_data.maxRptgDt, -server, ma2-awst-lap501, -cobTextKey, ai_fraud_core.athena_events_data.cobText, -nodeId, $INT-$INT-oozie-oozi-W@ATHENA_EVENTS_SEM_S3_GET_LPI]]]
level= INFO, message = "[jar:file:/usr/hdp/2.2.9.18-1/oozie/libserver/oozie-core-4.1.0.2.2.9.18-1.jar!/META-INF/persistence.xml, jar:file:/usr/hdp/2.2.9.18-1/oozie/oozie-server/webapps/oozie/WEB-INF/lib/oozie-core-4.1.0.2.2.9.18-1.jar!/META-INF/persistence.xml]", but persistence unit names should be unique. The first persistence unit matching the provided name in "jar:file:/usr/hdp/2.2.9.18-1/oozie/libserver/oozie-core-4.1.0.2.2.9.18-1.jar!/META-INF/persistence.xml" is being used.
level=INFO  message = FSNamesystem.audit: allowed=true	ugi=spark (auth:PROXY) via oozie/manager-0@$STRING  (auth:KERBEROS)	ip=/$IP cmd=getfileinfo	src=/user/spark/apps/mirror-test	dst=null	perm=null	proto=rpc
level=WARN message = SecurityLogger.org.apache.hadoop.ipc.Server: Auth failed for $IP:26576:null (DIGEST-MD5: IO error acquiring password)
level=INFO, message=  org.apache.hadoop.ipc.Client: Retrying connect to server: ec2.us-west-2.compute.amazonaws.com/$IP:8040. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=1, sleepTime=1000 MILLISECONDS)
level= ERROR, message= org.apache.hadoop.ha.ZKFailoverController: Couldn't transition NameNode at ec2.us-west-2.compute.amazonaws.com/$IP:8040 to standby state java.net.SocketTimeoutException: Call From ec2.us-west-2.compute.amazonaws.com/$IP to ec2.us-west-2.compute.amazonaws.com:8040 failed on socket timeout exception: java.net.SocketTimeoutException: 5000 millis timeout while waiting for channel to be ready for read. ch : java.nio.channels.SocketChannel[connected local=/$IP:45305 remote=ec2.us-west-2.compute.amazonaws.com/$IP:8040]; For more details see:  http://wiki.apache.org/hadoop/SocketTimeout at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)

